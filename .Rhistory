install.packages("dplyr")
library(dplyr)
library(plyr)
x <- c(1,2,3,5,6,7,7,889,220)
stuff <- ifelse(x>4,TRUE,FALSE)
stuff
table(x,stuff)
table(stuff,x>4)
x[stuff]
?cut
library(Hmisc)
yesno <- sample(c("yes","no"),size=10, replace=TRUE)
yesnofac = factor(yesno,levels=c("yes","no"))
relevel(yesnofac,ref="yes")
as.numeric(yesnofac)
library(reshape2)
head(mtcars)
carMelt <- melt(mtcars,id.vars = c("carname","gear","cyl"), measure.vars = c("mpg","hp"))
mtcars$carname<-rownames(mtcars)
carMelt <- melt(mtcars,id.vars = c("carname","gear","cyl"), measure.vars = c("mpg","hp"))
head(carMelt)
tail(carMelt)
cylData <- dcast(carMelt, cyl ~ variable)
?dcast
cylData
cylData <- dcast(carMelt, cyl ~ variable,mean,std)
cylData <- dcast(carMelt, cyl ~ variable,mean,cos())
cylData <- dcast(carMelt, cyl ~ variable,mean,cos)
cylData <- dcast(carMelt, cyl ~ variable,mean)
cylData
?split
library(data.table)
?split
library("crayon", lib.loc="C:/Program Files/R/R-3.3.2/library")
detach("package:crayon", unload=TRUE)
?ddply
?summarize
chicago <- readRDS("chicago.rds")
swirl()
library(swirl)
swirl(0)
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
print(cran)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size>100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version)))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size-1000
)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
install.packages("curl")
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran,package)
by_package
?summarize
summarize(by_package, mean(size))
?n
?n_distinct
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpmuA415/summarize1.R')
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
arrange(top_unique, desc(unique()))
arrange(top_unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_counts_sorted)
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpmuA415/chain1.R')
chain1()
chain1
cran %>%
select(ip_id, country, package, size) %>%
print
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpmuA415/chain1.R')
?
c
swirl()
cran %>%
select(ip_id, country, package, size) %>%
print
skip()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpmuA415/chain2.R')
skip()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpmuA415/chain3.R')
submit()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpmuA415/chain4.R')
submit()
library("dplyr", lib.loc="C:/Program Files/R/R-3.3.2/library")
library(swirl)
swirl(0)
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(student2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
separate(0)
separate()
?separate
separate(res, sex_class, into = c("sex","class"))
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script1.R')
submit()
students3
?gather
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
refresh()
reset()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
students3$class1:class6
students3$class1:class5
students3$class1
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
reset()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
select(students3,class1:class5)
students3%>%select(class1:class5)
students3%>%select(class1:class5)%>%gather(class,grade,na.rm=TRUE)
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
submit()
skip()
swirl()
submit()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
?gather
?filter
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script2.R')
skip()
?spread(0)
?spread
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script3.R')
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script3.R')
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script3.R')
submit()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script3.R')
submit()
library(readr)
parse_number("class5")
?mutate
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script4.R')
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script4.R')
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script4.R')
submit()
students4
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script5.R')
submit()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script6.R')
submit()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script7.R')
submit()
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script7.R')
submit()
passed
failed
passed <- mutate(passed, status="passed")
failed <- mutate(passed, status="failed")
failed <- mutate(failed, status="failed")
bind_rows(passed,failed)
sat
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script8.R')
submit(0)
submit()
?group_by
source('C:/Users/jcheadle/AppData/Local/Temp/RtmpIJz8pa/script9.R')
submit()
?heatmap.2
?heatmap
library(edgeR)
library(limma)
library(Glimma)
library(gplots)
library(RColorBrewer)
?heatmap.2
knit_with_parameters('C:/Program Files/R/Coursera/Data Science R/RepData_PeerAssessment1/PA1_template.Rmd')
x <- c(-0.5, 0, 1,1,1.5)
y <- c(0,0,2,0,0)
plot(x,y,lwd=3, frame=FALSE,type="l")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
swirl()
1 - (2+1)/36
deck
52
4/52
0
12/52
2/51
0.64
64%
.64
mypdf
integrate(f=mypdf, lower=0, upper=1.6)
.25/4
sqrt(2)
swirl(0)
swirl()
library(swirl)
swirl()
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
0.5(edh+edl)
0.5*(edh+edl)
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(X = allsam,MARGIN = 1,FUN=mean)
mean(smeans)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x,p)
temp
plot(temp)
plot(temp, type="l")
sqrt(.025)
sqrt(10)
mean(temp)
apply(temp,1,mean)
library(swirl)
swirl()
dice_sqr
sum(dice_sqr*dice_fair)
ex2_fair <- sum(dice_fair*dice_sqr)
ex2_fair - (3.5)^2
ex2_fair - 3.5^2
sum(dice_high*dice_sqr) - 3.5^2
sum(dice_high*dice_sqr) - edh^2
sd(apply(matrix(rnorm(10000), 1000),1 mean))
sd(apply(matrix(rnorm(10000), 1000),1, mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(4)
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/2*sqrt(10)
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
?pbinom
?qnorm
qnorm(.9, mean=1020, sd=50)
qnorm(.9, mean=1020, sd=50,lower.tail = TRUE)
qnorm(.9, mean=1020, sd=50,lower.tail = FALSE)
ppois(2, 500*.001)
ppois(2, lambda = 500*.001)
ppois(2, lambda = 500*.01)
swirl()
library(swirl)
swirl()
choose(5,3)*(.8^3)*(1-.8)^2 + choose(5,4)*(.8^4)*(1-.8) + choose(5,5)*(.8^5)
pbinom(2,size=5,prob=8, lower.tail=FALSE)
pbinom(2,size=5,prob=.8, lower.tail=FALSE)
qnorm(0.9)
qnorm(.1)
0
qnorm(p = 97.5,mean = 3, sd=2)
qnorm(p = .975,mean = 3, sd=2)
3 + 2*.975
1.96*2 + 3
pnorm(q = 1200,mean = 1020,sd = 50,lower.tail = FALSE)
pnorm(3.6)
pnorm(3.6, lower.tail=FALSE)
pnorm((1200-1020)/50,lower.tail=FALSE)
Qnorm(0.75, mean=1020, sd=50, lower.tail=TRUE)
qnorm(0.75, mean=1020, sd=50, lower.tail=TRUE)
.53
.53
ppois(q = 3,lambda = 4*2.5,lower.tail = TRUE, log.p=FALSE)
pbinom(q = 5, size = 1000, prob = .01, lower.tail = TRUE, log.p=FALSE)
ppois(5, lambda=1000*.01)
coinPlot(10)
coinPlot(10000)
qnorm(.95)
.6 + qnorm(.975)sqrt(.6(.4)/100)
.6 + qnorm(.975)*sqrt(.6(.4)/100)
.6 + qnorm(.975)*sqrt(.6*(.4)/100)
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
x <- binom.test(60,100)
binom.test(60,100)$conf.int
mywald(.2)
ACCompar(20)
lamb <- 5/94.32
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5, 94.32)$conf
pnorm(q = 70,mean = 80,sd=10,lower.tail = FALSE)
1 - .841
pnorm(q = 70,mean = 80,sd=10,lower.tail = TRUE)
qnorm(mean = 1100, sd=75)
qnorm(.975, mean=1100, sd=75)
qnorm(.95, mean=1100, sd=75)
qnorm(.95, mean=1100, sd=75)
pbinom(3,size=5,prob=0.5, lower.tail=FALSE)
ppois(q = 10,lambda = 5*3)
ppois(q = 10,lambda = 5*3, lower.tail=TRUE)
?qt
qt(.95, 15)
setwd("C:/Program Files/R/Coursera/Data Science R/StatisticalInference")
vars = NULL
for (i in 1:1000) {
vars = c(vars, var(rexp(n,lambda)))
}
lambda = 0.2
n = 40
sims = 1000
vars = NULL
for (i in 1:1000) {
vars = c(vars, var(rexp(n,lambda)))
}
hist(vars)
mean(vars)
line(x=25)
lines(x=25)
abline(x=25)
abline(b = 25)
abline(h = 25)
abline(v = 25)
abline(v = 25,lwd=2)
abline(v = 25,lwd=4, color = "blue")
abline(v = 25,lwd=4, col = "blue")
abline(v = 25,lwd=4, col = "blue")
knitr::opts_chunk$set(echo = TRUE)
hist(mns)
lambda = 0.2
n = 40
sims = 1000
## Distribution of the mean of 40 exponentials in 1000 simulations
mns = NULL
for (i in 1:1000) {
mns = c(mns, mean(rexp(n,lambda)))
}
## Distribution of the variance of 40 exponentials in 1000 simulations
vars = NULL
for (i in 1:1000) {
vars = c(vars, var(rexp(n,lambda)))
}
hist(mns)
abline(v = 5,lwd=4, col = "blue")
hist(mns,breaks = 20)
abline(v = 5,lwd=4, col = "blue")
hist(mns,breaks = 15)
abline(v = 5,lwd=4, col = "blue")
hist(mns,breaks = 10)
abline(v = 5,lwd=4, col = "blue")
hist(mns,breaks = 15)
abline(v = 5,lwd=4, col = "blue")
hist(mns,breaks = 20)
abline(v = 5,lwd=4, col = "blue")
## Theoretical Mean
1/lambda
## Mean of the averages of exponential distribution
mean(mns)
## Population Variance
sd = 1/lambda
pop_var = sd^2
pop_var
## Sample Variance (sd^2) of the averages of exponential distribution
mean(vars)
## Plotting histogram with a line at the population variance
hist(vars, breaks=20)
abline(v = 25,lwd=4, col = "blue")
## Plotting histogram with a line at the population variance
hist(vars, breaks=10)
abline(v = 25,lwd=4, col = "blue")
## Plotting histogram with a line at the population variance
hist(vars, breaks=15)
abline(v = 25,lwd=4, col = "blue")
hist(mns, prob=TRUE)
curve(dnorm(x, mean=mean(mns), sd=sd(mns)), add=TRUE, col="blue", lwd=4)
hist(mns, prob=TRUE, breaks=20)
curve(dnorm(x, mean=mean(mns), sd=sd(mns)), add=TRUE, col="blue", lwd=4)
## Plotting histogram with a line at the population variance
hist(vars, breaks=15)
abline(v = 25,lwd=4, col = "blue")
library(datasets)
ToothGrowth
dim(ToothGrowth)
tg <- ToothGrowth
class(g)
class(tg)
plot(tg[tg$supp == "VC",])
VC_tg <- tg[tg$supp == "VC",]
plot(VC_tg$dose, VC_tg$len)
par(mfrow=c(1,2))
plot(VC_tg$dose, VC_tg$len)
OJ_tg <- tg[tg$supp == "OJ",]
plot(OJ_tg$dose, OJ_tg$len)
?plot
boxplot(x = OJ_tg$len)
boxplot(x = OJ_tg$dose, y = OJ_tg$len)
boxplot(OJ_tg)
boxplot(tg)
?boxplot
boxplot(formula=len ~ dose, data=OJ_tg)
boxplot(formula=len ~ dose, data=OJ_tg,,names=unique(dose))
boxplot(formula=len ~ dose, data=OJ_tg,names=unique(dose))
boxplot(formula=len ~ dose, data=OJ_tg,names=unique(OJ_tg$dose))
boxplot(formula=len ~ dose, data=OJ_tg,names=unique(OJ_tg$dose), main="OJ")
boxplot(formula=len ~ dose, data=OJ_tg,names=unique(OJ_tg$dose), main="OJ", xlab="dose", ylab="len")
boxplot(formula=len ~ dose, data=VC_tg,names=unique(VC_tg$dose), main="VC", xlab="dose", ylab="len")
boxplot(formula=len ~ dose, data=OJ_tg,names=unique(OJ_tg$dose), main="OJ", xlab="dose", ylab="len")
knitr::opts_chunk$set(echo = TRUE)
library(datasets)
## Split data into supplements
VC_tg <- tg[tg$supp == "VC",]
OJ_tg <- tg[tg$supp == "OJ",]
## Plot boxplots of TG data for each supp
par(mfrow=c(1,2))
boxplot(formula=len ~ dose, data=VC_tg,names=unique(VC_tg$dose), main="VC", xlab="dose", ylab="len")
boxplot(formula=len ~ dose, data=OJ_tg,names=unique(OJ_tg$dose), main="OJ", xlab="dose", ylab="len")
## Split data into supplements
VC_tg <- tg[tg$supp == "VC",]
OJ_tg <- tg[tg$supp == "OJ",]
## Plot boxplots of TG data for each supp
par(mfrow=c(1,2))
boxplot(formula=len ~ dose, data=VC_tg,names=unique(VC_tg$dose), main="supp: VC", xlab="dose", ylab="len")
boxplot(formula=len ~ dose, data=OJ_tg,names=unique(OJ_tg$dose), main="supp: OJ", xlab="dose", ylab="len")
## Split data into supplements
VC_tg <- tg[tg$supp == "VC",]
OJ_tg <- tg[tg$supp == "OJ",]
## Plot boxplots of TG data for each supp
par(mfrow=c(1,2))
boxplot(formula=len ~ dose, data=VC_tg,names=unique(VC_tg$dose), main="supp: VC", xlab="dose", ylab="len")
axis(side = 2, at=c(0:35))
boxplot(formula=len ~ dose, data=OJ_tg,names=unique(OJ_tg$dose), main="supp: OJ", xlab="dose", ylab="len")
## Split data into supplements
VC_tg <- tg[tg$supp == "VC",]
OJ_tg <- tg[tg$supp == "OJ",]
## Plot boxplots of TG data for each supp
par(mfrow=c(1,2))
boxplot(formula=len ~ dose, data=VC_tg,names=unique(VC_tg$dose), main="supp: VC", xlab="dose", ylab="len")
axis(side = 1 at=c(0:35))
?axis
?plot
